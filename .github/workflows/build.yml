name: rust build

on:
  push:
    branches: [ dev, stable ] # CHANGE "master" TO "main" IF THAT IS THE NAME OF YOUR MAIN BRANCH!
  pull_request:
    branches: [ dev, stable ]
      
jobs:
  # build the plugin
  plugin_build:
    env:
      PLUGIN_NAME: hdr
    runs-on: ubuntu-latest
    container: 
      image: jugeeya/cargo-skyline:2.1.0-dkp
    outputs:
      version_string: ${{ steps.version.outputs.version_string }}
      commit_hash: ${{ steps.version.outputs.commit_hash }}
    steps:
    - name: setup python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9' # Version range or exact version of a Python version to use, using SemVer's version range syntax
    - name: Install git 
      run: |
        apt-get update
        apt-get install -y git
        git --version
        echo "Path is ... $PATH"
        PATH=$PATH:$(which git)
        echo "Path is ... $PATH"
    - name: checkout version
      uses: actions/checkout@v2
      with: 
        fetch-depth: 0

    - name: determine if release, beta, or nightly
      id: get_release_type
      shell: bash
      run: |
        if [[ ${{github.event.pull_request.base.ref}} == 'stable' || (${{github.ref}} == 'refs/heads/dev' && ${{github.event.pull_request.base.ref}} == '') ]]; then \
          echo "##[set-output name=release_type;]$(echo nightly)"; \
        elif [[ ${{github.ref}} == 'refs/heads/stable' ]]; then \
          echo "##[set-output name=release_type;]$(echo beta)"; \
        else \
          echo "##[set-output name=release_type;]$(echo release)"; \
        fi
    
    # if this is a nightly BUILD (aka, accepted PR to dev), OR a beta PR (a PR into stable) make changelog against stable
    - name: make nightly build or beta pr changes file
      id: nightly_changelog
      if: steps.get_release_type.outputs.release_type == nightly
      shell: bash
      run: |
        cd scripts && python3 make_changelog.py stable origin && cd ..
    
    # if this is a new beta BUILD, make changelog against the last beta
    - name: make beta build changelog file
      id: stable_changelog
      if: steps.get_release_type.outputs.release_type == beta
      shell: bash
      # do black magic to get the most recently tagged beta commit short hash, and then make the changelog file
      run: |
        cd scripts && export LAST_BETA=$(git rev-parse --short $(echo $(git for-each-ref --sort=-taggerdate --count=1 refs/tags/beta*) | head -n1 | awk '{print $1;}')) \
        && echo $LAST_BETA && python3 make_changelog.py $LAST_BETA local && cd ..

    # if this is a new release BUILD, make changelog against the last beta
    - name: make beta build changelog file
      id: stable_changelog
      if: steps.get_release_type.outputs.release_type == release
      shell: bash
      # do black magic to get the most recently tagged beta commit short hash, and then make the changelog file
      run: |
        cd scripts && export LAST_RELEASE=$(git rev-parse --short $(echo $(git for-each-ref --sort=-taggerdate --count=1 refs/tags/release*) | head -n1 | awk '{print $1;}')) \
        && echo $LAST_RELEASE && python3 make_changelog.py $LAST_RELEASE local && cd ..

    # generate semantic version
    - name: Semver run
      id: semver
      uses: lukaszraczylo/semver-generator@v1
      with:
        config_file: semver_config.yaml
        repository_local: true
    - name: Echo Semver
      run: |
        echo "Semantic version detected: ${{ steps.semver.outputs.semantic_version }}"

    # make the version string
    - name: collect version string
      id: version
      shell: bash
      run: |
        echo "##[set-output name=version_string;]$(echo ${{ steps.semver.outputs.semantic_version }}+$(git rev-parse --short HEAD))"
        echo "##[set-output name=commit_hash;]$(echo $(git rev-parse --short HEAD))"
        echo $(git rev-parse --short HEAD)
        echo target ref: ${{ github.event.pull_request.base.ref }}
        echo head ref: ${{ github.ref }}

    # build the project
    - run: |
        export PATH=$PATH:/root/.cargo/bin:/opt/devkitpro/devkitA64/bin && export HDR_VERSION="${{ steps.version.outputs.version_string }}" \
        && cd scripts && python3 make_dist.py publish && cd ..
      env:
        HOME: /root
    - name: Upload hdr-switch artifact
      uses: actions/upload-artifact@v2
      with:
        name: hdr-switch
        path: distributions/hdr-switch.zip
    - name: Upload hdr-ryujinx artifact
      uses: actions/upload-artifact@v2
      with:
        name: hdr-ryujinx
        path: distributions/hdr-ryujinx.zip
    - name: Upload change_summary.txt
      uses: actions/upload-artifact@v2
      with:
        name: change_summary
        path: scripts/change_summary.txt
        if-no-files-found: ignore # 'error', 'warn', or 'ignore' are available, defaults to `warn`

  # upload a nightly
  upload_nightly:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    needs:
      - plugin_build
    steps:
    # print the outputs from the build job
    - run: |
        echo "Version string: ${{ needs.plugin_build.outputs.version_string }}"
        echo "Commit hash: ${{ needs.plugin_build.outputs.commit_hash }}"
    - name: delete old nightlies
      uses: dev-drprasad/delete-older-releases@v0.2.0
      with:
        keep_latest: 0
        #delete_tags: true
        delete_tag_pattern: nightly # defaults to ""
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Download all artifacts
      uses: actions/download-artifact@v2
    - name: Update Nightly
      uses: meeDamian/github-release@2.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        prerelease: true
        allow_override: true
        gzip: false
        tag: nightly-${{ needs.plugin_build.outputs.version_string }}
        name: nightly ${{ needs.plugin_build.outputs.version_string }}
        body: >
          Nightly built off of the latest code in the repository. 
        files: >
          hdr-switch/*
          hdr-ryujinx/*
          change_summary/*

  # upload a beta
  upload_beta:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/stable'
    needs:
      - plugin_build
    steps:
    # print the outputs from the build job
    - run: |
        echo "Version string: ${{ needs.plugin_build.outputs.version_string }}"
        echo "Commit hash: ${{ needs.plugin_build.outputs.commit_hash }}"
    - name: delete old betas
      uses: dev-drprasad/delete-older-releases@v0.2.0
      with:
        keep_latest: 0
        #delete_tags: true
        delete_tag_pattern: beta # defaults to ""
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Download all artifacts
      uses: actions/download-artifact@v2
    - name: Update Beta
      uses: meeDamian/github-release@2.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        prerelease: true
        allow_override: true
        gzip: false
        tag: beta-${{ needs.plugin_build.outputs.version_string }}
        name: beta ${{ needs.plugin_build.outputs.version_string }}
        body: >
          Beta built off of the latest code in the repository. 
        files: >
          hdr-switch/*
          hdr-ryujinx/*
          change_summary/*
