name: rust build

on:
  push:
    branches: [ dev, stable ] # CHANGE "master" TO "main" IF THAT IS THE NAME OF YOUR MAIN BRANCH!
    paths-ignore:
      - '**/README.md'
      - '**/.gitignore'
      - 'scripts/**'
  pull_request:
    branches: [ dev, stable ]
    paths-ignore:
      - '**/README.md'
      - '**/.gitignore'
      - 'scripts/**'
      

jobs:
  # build the plugin
  plugin_build:
    env:
      PLUGIN_NAME: hdr
    runs-on: ubuntu-latest
    container: 
      image: jugeeya/cargo-skyline:2.1.0-dkp
    outputs:
      version_string: ${{ steps.version.outputs.version_string }}
      commit_hash: ${{ steps.version.outputs.commit_hash }}
    steps:
    - name: setup python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9' # Version range or exact version of a Python version to use, using SemVer's version range syntax
    - name: Install git 
      run: |
        apt-get update
        apt-get install -y git
        git --version
        echo "Path is ... $PATH"
        PATH=$PATH:$(which git)
        echo "Path is ... $PATH"
    - name: checkout version
      uses: actions/checkout@v2
      with: 
        fetch-depth: 0
    - name: semantic version
      uses: paulhatch/semantic-version@v4.0.2
      id: semantic-version
      with:
        # The prefix to use to identify tags
        tag_prefix: "v"
        # A string which, if present in a git commit, indicates that a change represents a
        # major (breaking) change, supports regular expressions wrapped with '/'
        major_pattern: "(MAJOR)"
        # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
        minor_pattern: "(MINOR)"
        # A string to determine the format of the version output
        format: "v${major}.${minor}.${patch}"
        # Indicate whether short tags like 'v1' should be supported. If false only full
        # tags like 'v1.0.0' will be recognized.
        short_tags: false
        # If this is set to true, *every* commit will be treated as a new version.
        bump_each_commit: false
    - name: collect version string
      id: version
      shell: bash
      run: |
        echo "##[set-output name=version_string;]$(echo ${{ steps.semantic-version.outputs.version }}-$(git rev-parse --short HEAD))"
        echo "##[set-output name=commit_hash;]$(echo $(git rev-parse --short HEAD))"
        echo $(git rev-parse --short HEAD)
        echo target ref: ${{ github.event.pull_request.base.ref }}
        echo head ref: ${{ github.ref }}
    
    # if this is a nightly BUILD (aka, accepted PR to dev), OR a beta PR (a PR into stable) make changelog against stable
    - name: make nightly build or beta pr changes file
      id: nightly_changelog
      if: (github.event.pull_request.base.ref == 'stable') || (github.ref == 'refs/heads/dev' && github.event.pull_request.base.ref == '')
      shell: bash
      run: |
        cd scripts && python3 make_changelog.py stable && cd ..
    
    # if this is a new beta BUILD, make changelog against the last beta
    - name: make beta build changelog file
      id: stable_changelog
      if: github.ref == 'refs/heads/stable'
      shell: bash
      run: |
        cd scripts && export LAST_BETA=$(python3 get_last_beta.py) && echo $LAST_BETA && python3 make_changelog.py $LAST_BETA && cd ..

    # build the project
    - run: |
        export PATH=$PATH:/root/.cargo/bin:/opt/devkitpro/devkitA64/bin && export HDR_VERSION="${{ steps.version.outputs.version_string }}" && cd scripts && python3 make_dist.py publish && cd ..
      env:
        HOME: /root
    - name: Upload hdr-switch artifact
      uses: actions/upload-artifact@v2
      with:
        name: hdr-switch
        path: distributions/hdr-switch.zip
    - name: Upload hdr-ryujinx artifact
      uses: actions/upload-artifact@v2
      with:
        name: hdr-ryujinx
        path: distributions/hdr-ryujinx.zip
    - name: Upload change_summary.txt
      uses: actions/upload-artifact@v2
      with:
        name: change_summary
        path: scripts/change_summary.txt
        if-no-files-found: ignore # 'error', 'warn', or 'ignore' are available, defaults to `warn`

  # upload a nightly
  upload_nightly:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    needs:
      - plugin_build
    steps:
    # print the outputs from the build job
    - run: |
        echo "Version string: ${{ needs.plugin_build.outputs.version_string }}"
        echo "Commit hash: ${{ needs.plugin_build.outputs.commit_hash }}"
    - name: delete old nightlies
      uses: dev-drprasad/delete-older-releases@v0.2.0
      with:
        keep_latest: 0
        #delete_tags: true
        delete_tag_pattern: nightly # defaults to ""
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Download all artifacts
      uses: actions/download-artifact@v2
    - name: Update Nightly
      uses: meeDamian/github-release@2.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        prerelease: true
        allow_override: true
        gzip: false
        tag: nightly-${{ needs.plugin_build.outputs.version_string }}
        name: nightly ${{ needs.plugin_build.outputs.version_string }}
        body: >
          Nightly built off of the latest code in the repository. 
        files: >
          hdr-switch/*
          hdr-ryujinx/*
          change_summary/*

  # upload a beta
  upload_beta:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/stable'
    needs:
      - plugin_build
    steps:
    # print the outputs from the build job
    - run: |
        echo "Version string: ${{ needs.plugin_build.outputs.version_string }}"
        echo "Commit hash: ${{ needs.plugin_build.outputs.commit_hash }}"
    - name: delete old betas
      uses: dev-drprasad/delete-older-releases@v0.2.0
      with:
        keep_latest: 0
        #delete_tags: true
        delete_tag_pattern: beta # defaults to ""
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Download all artifacts
      uses: actions/download-artifact@v2
    - name: Update Beta
      uses: meeDamian/github-release@2.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        prerelease: true
        allow_override: true
        gzip: false
        tag: beta-${{ needs.plugin_build.outputs.version_string }}
        name: beta ${{ needs.plugin_build.outputs.version_string }}
        body: >
          Beta built off of the latest code in the repository. 
        files: >
          hdr-switch/*
          hdr-ryujinx/*
          change_summary/*
